module Main where

input :: [Int]
input = [
        1,3,3,4,5,1,1,1,1,1,1,2,1,4,1,1,1,5,2,2,4,3,1,1,2,5,4,2,2,3,1,2,3,2,1,1,4,4,2,4,4,1,2,4,3,3,3,1,1,3,4,5,2,5,1,2,5,
        1,1,1,3,2,3,3,1,4,1,1,4,1,4,1,1,1,1,5,4,2,1,2,2,5,5,1,1,1,1,2,1,1,1,1,3,2,3,1,4,3,1,1,3,1,1,1,1,3,3,4,5,1,1,5,4,4,
        4,4,2,5,1,1,2,5,1,3,4,4,1,4,1,5,5,2,4,5,1,1,3,1,3,1,4,1,3,1,2,2,1,5,1,5,1,3,1,3,1,4,1,4,5,1,4,5,1,1,5,2,2,4,5,1,3,
        2,4,2,1,1,1,2,1,2,1,3,4,4,2,2,4,2,1,4,1,3,1,3,5,3,1,1,2,2,1,5,2,1,1,1,1,1,5,4,3,5,3,3,1,5,5,4,4,2,1,1,1,2,5,3,3,2,
        1,1,1,5,5,3,1,4,4,2,4,2,1,1,1,5,1,2,4,1,3,4,4,2,1,4,2,1,3,4,3,3,2,3,1,5,3,1,1,5,1,2,2,4,4,1,2,3,1,2,1,1,2,1,1,1,2,
        3,5,5,1,2,3,1,3,5,4,2,1,3,3,4
    ]

advance :: [Int] -> [Int]
advance (zeros : l) = map (\(i, c) -> if i == 6 then c + zeros else c) (zip [0..] (l ++ [zeros]))
advance l = l -- Never happens

allDays :: [Int] -> [[Int]]
allDays l = l : (allDays (advance l))

counters :: [Int] -> [Int]
counters l = [ length $ filter (== i) l | i <- [0..8]]

main :: IO ()
main = do
    print $ sum $ (allDays $ counters input)!!256
    return ()
